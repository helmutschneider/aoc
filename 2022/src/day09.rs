use crate::util::Day;
use heapless::{FnvIndexSet, Vec};

pub const DAY_09: Day<i32> = Day {
    year: 2022,
    day: 9,
    parts: &[do_part::<2>, do_part::<10>],
    tests: &[parses_correctly, do_move_1, do_move_with_many_propagations],
};

fn do_part<const N: usize>() -> i32 {
    let mut rope = Rope::<N>::new();
    let moves = parse_moves(INPUT);

    // this should be a set but heapless::FnvIndexSet<T, N> requires
    // the size to be a power of two. we need at least 6000 slots,
    // so our minimum size would be 8192 if we use a single set.
    // however, that causes us to run out of memory.
    let mut visited_tail_points_a: FnvIndexSet<Point, 4096> = FnvIndexSet::new();
    let mut visited_tail_points_b: FnvIndexSet<Point, 2048> = FnvIndexSet::new();

    for mv in moves {
        for _ in 0..mv.steps {
            rope.move_to_direction(mv.direction);

            let tail = rope.tail();

            let is_visited =
                visited_tail_points_a.contains(&tail) || visited_tail_points_b.contains(&tail);

            if !is_visited {
                if visited_tail_points_a.capacity() == visited_tail_points_a.len() {
                    if visited_tail_points_b.capacity() == visited_tail_points_b.len() {
                        panic!("Both sets are full.");
                    }
                    visited_tail_points_b.insert(tail).unwrap();
                } else {
                    visited_tail_points_a.insert(tail).unwrap();
                }
            }
        }
    }

    return (visited_tail_points_a.len() + visited_tail_points_b.len()) as i32;
}

fn parse_moves<'a>(data: &'a str) -> impl Iterator<Item = Move> + 'a {
    let lines = data.trim().lines();
    let iter = crate::util::FnIterator::new(lines, |line| {
        let (d, steps) = line.split_once(" ").unwrap();
        let direction = match d {
            "R" => Direction::Right,
            "U" => Direction::Up,
            "L" => Direction::Left,
            "D" => Direction::Down,
            _ => panic!("Bad {}", d),
        };

        let mv = Move {
            direction,
            steps: steps.parse().unwrap(),
        };
        return mv;
    });

    return iter;
}

#[derive(Debug, Clone, Copy, PartialEq)]
enum Direction {
    Up,
    Right,
    Down,
    Left,
}

#[derive(Debug, Clone, Copy)]
struct Move {
    direction: Direction,
    steps: i16,
}

#[derive(Debug)]
struct Rope<const N: usize> {
    knots: [Point; N],
}

impl<const N: usize> Rope<N> {
    fn new() -> Self {
        return Self {
            knots: [Point::new(); N],
        };
    }

    fn move_to_direction(&mut self, direction: Direction) {
        let head = self.head();
        let (next_x, next_y) = match direction {
            Direction::Up => (head.x, head.y + 1),
            Direction::Right => (head.x + 1, head.y),
            Direction::Down => (head.x, head.y - 1),
            Direction::Left => (head.x - 1, head.y),
        };
        self.knots[0].x = next_x;
        self.knots[0].y = next_y;

        for k in 1..self.knots.len() {
            let knot = self.knots[k];
            let prev_knot = self.knots[k - 1];

            let diff_x = prev_knot.x - knot.x;
            let diff_y = prev_knot.y - knot.y;
            let needs_move = diff_x.abs() == 2 || diff_y.abs() == 2;

            // if this knot doesn't move the next won't either.
            if !needs_move {
                return;
            }

            let needs_diagonal_move = (diff_x.abs() + diff_y.abs()) == 3;
            let next_x = match diff_x {
                -2 => prev_knot.x + 1,
                2 => prev_knot.x - 1,
                _ => {
                    if needs_diagonal_move {
                        assert_eq!(1, diff_x.abs());
                        prev_knot.x
                    } else {
                        knot.x
                    }
                }
            };
            let next_y = match diff_y {
                -2 => prev_knot.y + 1,
                2 => prev_knot.y - 1,
                _ => {
                    if needs_diagonal_move {
                        assert_eq!(1, diff_y.abs());
                        prev_knot.y
                    } else {
                        knot.y
                    }
                }
            };

            self.knots[k].x = next_x;
            self.knots[k].y = next_y;
        }
    }

    fn move_steps(&mut self, mv: Move) {
        for _ in 0..mv.steps {
            self.move_to_direction(mv.direction);
        }
    }

    fn head(&self) -> Point {
        return self.knots[0];
    }

    fn tail(&self) -> Point {
        return *self.knots.last().unwrap();
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, hash32_derive::Hash32)]
struct Point {
    x: i16,
    y: i16,
}

impl Point {
    fn new() -> Self {
        return Self { x: 0, y: 0 };
    }
}

const TEST_INPUT: &'static str = r#"
R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2
"#;

fn parses_correctly() {
    let moves: Vec<Move, 16> = parse_moves(TEST_INPUT).collect();

    assert_eq!(8, moves.len());
    assert_eq!(Direction::Right, moves[0].direction);
    assert_eq!(4, moves[0].steps);
}

fn do_move_1() {
    let moves: Vec<Move, 16> = parse_moves(TEST_INPUT).collect();
    let mut rope = Rope::<2>::new();

    rope.move_steps(moves[0]);

    assert_eq!(4, rope.head().x);
    assert_eq!(0, rope.head().y);

    assert_eq!(3, rope.tail().x);
    assert_eq!(0, rope.tail().y);

    rope.move_steps(moves[1]);

    assert_eq!(4, rope.head().x);
    assert_eq!(4, rope.head().y);

    assert_eq!(4, rope.tail().x);
    assert_eq!(3, rope.tail().y);
}

fn do_move_with_many_propagations() {
    let moves: Vec<Move, 16> = parse_moves(TEST_INPUT).collect();
    let mut rope = Rope::<10>::new();

    rope.move_steps(moves[0]);

    assert_eq!(4, rope.head().x);
    assert_eq!(0, rope.head().y);

    assert_eq!(3, rope.knots[1].x);
    assert_eq!(0, rope.knots[1].y);

    assert_eq!(2, rope.knots[2].x);
    assert_eq!(0, rope.knots[2].y);

    assert_eq!(1, rope.knots[3].x);
    assert_eq!(0, rope.knots[3].y);

    rope.move_steps(moves[1]);

    assert_eq!(4, rope.head().x);
    assert_eq!(4, rope.head().y);

    assert_eq!(4, rope.knots[1].x);
    assert_eq!(3, rope.knots[1].y);

    assert_eq!(4, rope.knots[2].x);
    assert_eq!(2, rope.knots[2].y);

    assert_eq!(3, rope.knots[3].x);
    assert_eq!(2, rope.knots[3].y);

    assert_eq!(2, rope.knots[4].x);
    assert_eq!(2, rope.knots[4].y);
}

const INPUT: &'static str = r#"
R 2
L 2
D 2
U 2
R 2
D 2
L 2
D 2
U 2
L 2
D 1
R 1
D 2
R 2
U 1
R 1
U 2
R 1
L 2
D 2
L 1
U 1
L 1
D 1
R 1
L 2
U 2
R 2
U 1
R 2
L 2
D 1
U 1
D 2
L 1
U 1
L 1
D 1
U 1
D 1
L 2
D 2
U 2
L 2
U 1
R 2
D 2
L 1
R 1
U 1
R 1
L 1
U 2
D 1
U 2
R 1
U 1
R 2
D 2
R 2
U 2
D 2
U 2
L 1
D 2
R 1
L 2
D 2
R 2
L 2
U 2
L 2
R 1
D 1
R 1
L 2
D 1
L 2
R 1
U 1
R 1
U 1
L 2
U 1
D 2
R 1
L 1
D 1
R 1
L 2
R 2
L 2
R 1
L 1
D 1
L 1
R 1
D 2
U 1
D 2
R 1
D 1
U 1
L 1
R 1
D 2
R 2
L 2
R 1
L 1
R 1
U 3
L 2
R 3
L 1
R 1
L 2
D 1
U 3
L 1
R 3
U 1
L 2
U 2
D 2
R 2
D 1
L 2
U 1
R 1
L 3
R 2
L 3
R 2
L 2
D 2
U 3
R 2
L 1
R 2
U 1
D 2
U 3
D 1
U 3
L 1
R 3
D 2
R 1
L 2
D 1
L 1
D 3
U 2
L 3
R 1
U 3
L 1
R 2
U 3
D 2
U 3
L 3
R 1
L 2
R 2
D 3
L 1
D 3
R 3
L 1
U 1
D 1
L 3
D 1
U 2
D 3
U 3
L 1
U 2
D 1
R 3
D 1
R 1
L 2
U 1
R 1
L 1
U 3
D 3
U 3
R 1
D 3
U 1
L 2
R 2
U 2
R 1
D 3
L 1
D 2
U 2
R 2
D 2
R 3
L 2
R 1
L 3
D 3
R 1
L 1
U 3
R 1
D 3
R 3
D 2
U 2
R 2
D 2
U 3
D 2
R 1
U 2
L 3
D 1
L 2
U 1
D 1
U 4
R 4
U 4
D 4
U 3
D 1
R 4
L 1
D 2
R 3
U 1
R 2
D 2
U 4
R 3
D 2
L 1
U 4
D 3
U 1
D 4
L 2
U 3
D 4
R 3
L 2
D 4
L 2
R 3
U 2
R 2
U 1
L 3
R 3
L 3
U 4
R 4
U 2
R 3
U 1
L 3
D 4
L 4
R 4
D 3
L 4
R 1
U 4
D 3
R 3
U 1
L 4
U 2
L 2
D 4
U 3
R 1
U 2
D 4
U 4
D 4
U 1
L 4
R 3
U 2
R 1
L 4
D 4
U 3
R 2
L 2
U 3
L 1
R 1
L 1
U 4
L 1
R 3
U 1
R 1
D 2
R 2
L 4
D 1
L 2
R 1
D 1
L 3
D 3
U 4
R 2
L 4
U 2
L 1
R 3
U 3
L 2
R 2
D 2
R 3
U 4
L 1
U 3
L 3
U 1
R 1
L 2
D 3
L 5
D 2
U 2
D 4
R 2
L 3
U 3
R 1
U 4
D 1
R 2
U 1
L 5
R 4
D 5
R 5
D 2
U 2
L 5
D 2
U 3
R 2
L 4
D 5
L 4
R 4
U 5
R 2
U 5
L 1
D 2
L 3
U 4
D 2
U 2
L 3
R 4
U 4
R 5
L 1
D 2
U 4
D 5
L 5
R 4
U 3
R 2
U 5
L 3
U 5
R 3
U 2
R 2
D 3
R 2
L 2
D 4
R 4
U 3
R 3
D 5
R 2
U 3
L 5
R 1
U 5
D 4
R 3
D 5
U 1
R 4
L 5
D 1
U 3
L 4
U 3
R 3
D 5
U 5
D 5
L 5
U 4
D 5
L 3
R 3
D 4
U 2
L 5
R 1
U 5
L 4
U 4
D 5
R 4
L 1
U 2
D 2
L 1
R 2
D 4
R 5
L 3
R 4
D 4
L 4
R 2
L 1
D 3
L 3
R 2
D 3
R 5
D 2
U 4
D 5
L 1
U 3
D 3
U 6
L 1
R 1
L 4
R 6
L 1
R 1
D 2
U 6
R 1
U 3
R 6
U 1
R 1
L 3
D 5
R 6
L 6
R 1
U 2
R 1
L 5
R 5
D 6
R 4
D 4
R 1
U 6
R 4
U 1
R 5
U 3
L 5
U 1
R 5
L 5
D 5
R 3
L 5
D 3
L 2
U 3
R 1
U 1
D 4
R 4
L 2
U 3
L 1
U 5
L 5
D 4
R 6
U 6
L 5
U 3
R 3
D 1
U 6
R 2
L 4
R 2
L 5
U 3
D 1
U 3
R 1
D 1
L 3
U 6
L 5
U 2
L 3
D 1
L 3
U 6
L 4
D 3
R 4
D 1
L 4
U 1
R 6
D 6
R 5
D 4
R 4
D 4
U 6
D 4
L 3
R 4
L 5
R 1
D 6
U 6
D 2
R 1
L 6
U 6
L 5
D 6
U 4
R 4
D 3
U 5
D 6
U 7
L 5
U 7
R 6
U 1
L 6
U 1
R 2
D 7
R 4
U 1
R 6
L 6
D 4
L 4
U 4
R 1
D 7
L 7
D 7
L 5
D 1
L 1
U 2
R 5
D 5
L 3
U 5
D 6
L 4
R 1
U 6
L 3
D 6
L 7
D 6
R 3
U 7
R 1
D 6
R 3
U 7
D 5
U 1
L 4
U 3
D 3
U 3
R 1
L 2
R 2
L 1
U 3
D 5
U 7
D 1
U 7
L 4
D 3
U 4
R 6
D 2
L 5
R 7
L 5
R 1
U 6
R 7
U 4
D 3
U 1
L 1
D 1
U 6
L 1
U 1
R 7
L 4
D 1
U 2
R 7
L 7
R 5
U 4
R 2
L 7
U 6
R 5
L 1
R 3
U 7
D 7
L 4
R 1
U 4
R 1
L 7
D 4
L 5
D 7
U 4
L 5
R 6
U 1
L 4
R 6
D 2
L 1
D 2
U 4
L 5
U 5
D 4
U 7
L 2
D 3
U 5
R 7
D 1
R 7
D 6
U 4
R 3
D 5
U 5
D 8
R 7
L 7
R 1
D 5
L 3
R 1
U 3
R 6
D 5
R 6
L 5
D 7
L 5
R 2
D 1
R 7
L 1
D 3
R 8
L 5
U 8
R 6
U 4
D 2
U 4
D 5
U 7
D 5
U 2
D 3
U 1
R 4
L 2
R 4
U 7
R 8
D 2
U 3
R 7
D 2
U 1
D 6
R 4
L 4
R 3
D 8
R 8
U 7
L 3
U 7
D 1
U 6
R 8
L 1
R 1
D 8
U 7
L 3
D 4
L 4
R 2
L 6
D 6
L 4
R 7
D 8
L 8
U 8
R 2
L 6
U 5
D 2
L 5
U 1
L 6
D 6
U 7
L 2
U 5
R 6
D 5
L 8
U 8
R 1
U 2
L 3
D 1
L 3
U 4
D 3
L 6
R 9
L 9
U 9
R 1
D 4
U 1
L 3
R 7
U 7
R 1
U 1
R 2
D 4
U 8
L 7
R 3
U 8
L 1
R 1
D 7
U 3
L 3
U 8
D 3
L 1
D 6
L 3
U 4
D 3
U 3
L 3
D 5
L 6
U 9
L 1
U 2
L 3
R 1
L 9
D 2
U 1
L 3
R 9
L 8
R 2
L 7
D 4
L 4
R 2
L 4
R 8
D 4
L 2
D 5
R 8
U 6
L 9
D 1
L 6
R 9
D 4
L 5
U 5
D 1
U 3
L 4
U 2
L 2
R 2
L 1
R 7
L 4
D 4
U 4
L 1
R 2
D 6
L 1
U 8
D 7
R 5
D 7
R 7
L 8
U 8
L 5
D 7
U 2
D 2
R 1
U 2
L 1
R 1
L 2
D 1
U 9
L 9
U 9
R 1
U 3
R 7
U 8
R 1
L 7
D 1
U 7
R 9
D 8
R 2
D 5
L 5
D 2
L 6
U 6
R 1
L 1
D 2
R 4
L 3
U 2
R 5
L 3
R 6
U 8
R 1
U 1
R 7
D 10
R 2
D 4
R 3
L 5
D 1
U 8
R 1
U 4
D 6
L 5
U 8
D 6
L 6
R 4
L 9
R 5
U 6
L 8
U 6
L 10
D 4
U 6
L 8
U 3
R 3
L 6
U 1
R 9
D 8
U 9
R 5
U 10
R 8
U 9
L 7
R 4
D 7
U 3
L 5
R 3
D 9
L 9
U 6
R 10
L 2
D 7
U 8
D 4
L 3
U 4
R 2
L 10
D 4
U 10
R 7
D 5
R 7
U 3
L 10
R 8
L 7
D 3
L 6
R 1
L 2
U 1
R 1
U 8
R 5
L 9
R 9
L 1
D 4
R 6
U 7
L 7
R 3
U 4
D 2
U 8
L 5
D 3
L 6
D 7
L 2
U 1
R 6
L 8
D 9
R 3
U 4
D 8
L 5
R 9
L 1
U 7
L 5
D 4
U 5
L 4
R 4
L 3
U 11
D 1
L 10
U 6
L 5
D 3
U 8
D 11
L 8
R 2
U 5
L 9
D 3
L 11
R 2
U 5
L 7
D 11
R 8
U 1
L 10
R 10
L 9
R 9
L 8
R 7
D 3
U 6
R 11
U 8
D 4
L 9
U 3
D 5
L 4
R 5
D 7
L 5
U 10
D 8
L 3
D 2
U 9
D 6
L 3
U 3
D 8
U 4
R 1
L 9
U 4
L 5
D 10
L 11
U 6
D 8
L 5
R 9
L 2
U 2
L 10
R 5
U 6
L 7
R 7
U 9
D 6
R 7
D 8
U 7
R 6
L 2
D 6
R 8
L 5
R 1
L 10
R 8
U 11
R 10
L 10
R 10
L 4
U 4
D 9
U 8
R 5
D 7
U 7
L 6
D 4
L 9
R 2
U 8
D 2
L 2
D 2
U 6
L 2
R 9
U 10
D 11
U 3
R 9
U 1
L 11
R 7
L 4
R 5
U 10
L 3
R 10
L 10
D 2
L 9
D 9
L 6
D 11
R 10
L 2
R 4
D 2
R 4
D 8
L 3
U 10
R 4
L 2
U 1
L 3
R 1
L 2
R 3
D 2
L 2
D 3
R 5
U 10
L 12
R 5
D 5
U 9
L 9
D 2
L 8
U 2
L 11
U 5
L 8
U 7
R 4
U 10
D 4
L 5
R 3
D 8
R 12
L 5
U 9
L 10
R 5
U 10
R 1
L 5
U 6
D 7
L 12
D 2
R 12
L 1
U 11
D 8
R 12
L 8
U 3
R 9
L 8
D 2
L 10
D 10
R 4
D 2
R 11
U 4
R 10
U 7
L 7
D 5
U 5
R 9
D 10
L 10
U 1
D 11
U 4
D 5
U 5
D 8
U 2
D 4
R 4
L 5
U 10
D 12
R 9
L 11
R 9
L 1
D 9
L 11
D 12
U 4
R 7
D 1
U 3
L 4
U 9
R 12
D 1
L 7
U 7
D 6
U 1
R 3
L 7
U 5
L 2
D 10
R 12
L 3
U 7
D 10
L 5
R 1
U 9
L 1
D 11
R 5
L 2
D 1
U 3
R 2
L 3
U 5
L 3
D 5
R 10
L 7
R 12
U 4
D 3
R 3
L 2
R 7
U 4
D 9
U 7
D 1
R 9
L 2
U 6
R 5
D 3
U 7
R 12
L 10
D 11
L 8
U 12
D 13
U 9
D 5
U 4
R 2
L 3
U 13
R 4
L 9
U 4
L 3
U 9
R 1
D 6
U 4
D 3
U 5
R 5
L 11
R 8
D 1
U 4
D 10
R 5
D 10
U 3
D 4
R 1
U 3
R 13
L 6
D 8
R 12
L 4
U 2
L 13
D 11
L 4
U 8
L 10
R 2
D 8
R 11
L 2
D 8
R 8
L 10
U 10
L 4
D 9
L 7
D 11
L 10
U 13
L 6
U 7
D 8
L 3
R 10
L 14
U 13
L 11
D 5
R 8
U 2
D 9
L 14
U 7
R 4
U 1
D 8
U 8
D 9
L 2
D 7
R 1
D 9
R 2
U 4
D 8
L 9
R 6
L 2
R 11
D 6
L 5
U 8
L 4
R 3
D 5
L 3
U 9
R 3
U 1
D 7
R 1
L 10
U 1
L 8
U 11
D 8
U 12
R 9
L 5
D 10
L 2
R 8
D 10
R 6
D 1
L 11
D 8
R 7
L 14
D 12
L 11
R 11
U 9
R 12
D 10
L 12
R 4
L 8
D 2
R 3
L 14
R 7
U 10
R 1
L 6
R 4
D 11
L 13
R 12
U 4
L 12
U 10
D 8
R 10
D 9
R 13
L 2
U 2
D 7
U 7
R 3
D 3
R 13
U 8
R 10
U 13
D 14
R 11
D 7
R 2
U 5
D 2
L 6
U 14
L 10
R 9
U 11
R 12
D 5
L 11
R 12
U 11
R 8
L 2
D 14
U 3
D 9
U 5
L 4
U 5
L 6
D 3
L 1
R 10
L 4
D 12
U 15
L 5
D 11
L 15
D 10
L 14
U 1
L 14
D 6
R 6
U 9
R 1
L 7
D 11
U 12
D 2
R 7
L 2
D 13
U 13
R 6
L 3
D 3
R 11
U 3
D 3
U 11
L 10
U 7
R 7
D 9
U 10
R 11
U 12
D 11
R 11
U 2
R 2
D 9
R 12
D 1
L 11
R 1
U 2
R 14
L 4
R 1
D 12
R 7
U 12
L 2
U 5
D 7
R 15
D 5
L 9
D 7
R 10
U 12
D 10
R 11
D 5
U 10
R 2
U 11
R 3
U 6
D 14
U 11
D 5
L 8
D 6
L 2
U 2
L 14
R 8
U 15
L 10
D 1
R 4
L 8
D 7
L 15
U 10
D 14
U 9
L 7
R 13
U 11
R 15
L 11
R 2
L 11
R 14
L 1
D 10
L 2
U 7
L 9
D 12
R 2
L 4
U 4
R 9
L 6
R 13
D 1
U 13
R 7
D 3
R 14
L 12
D 15
R 16
L 7
R 2
U 3
R 9
U 10
D 6
U 7
L 11
D 12
L 16
R 12
D 10
U 16
D 9
U 14
L 14
U 11
D 14
L 14
D 10
L 3
D 10
U 6
D 11
L 8
U 4
D 1
U 5
D 5
L 4
U 8
R 3
D 12
U 4
R 8
D 6
U 8
D 2
U 12
L 6
D 12
R 7
D 6
U 7
D 12
L 3
R 2
L 12
R 13
U 16
L 6
D 8
U 13
R 14
D 4
U 7
D 1
R 4
D 13
R 10
D 7
R 11
L 6
U 6
R 7
L 8
D 2
L 11
U 3
L 12
U 4
D 11
U 8
D 10
U 1
R 12
U 1
L 15
R 15
D 2
L 8
D 13
L 3
R 8
U 14
R 5
U 3
D 15
U 7
D 1
L 6
D 8
U 13
R 6
L 6
D 3
L 9
D 17
U 8
R 16
L 6
D 9
U 3
L 10
R 13
L 14
U 8
R 7
U 12
D 14
R 1
D 3
L 11
R 8
D 9
R 17
D 5
R 17
U 8
L 10
D 7
U 4
D 16
L 9
D 1
L 16
R 7
L 1
R 11
U 10
R 2
U 10
L 15
U 10
R 2
D 11
U 12
L 15
U 4
D 2
R 4
U 2
L 11
R 16
U 10
R 4
D 9
U 7
D 2
R 10
D 14
L 10
U 9
R 7
D 3
R 7
L 3
U 15
D 13
L 17
R 12
U 13
D 16
U 13
R 13
U 14
L 16
U 7
D 2
R 11
U 17
D 9
R 12
U 16
L 11
R 3
U 9
L 6
D 2
U 1
D 7
L 1
U 7
D 8
U 11
L 4
R 6
L 2
U 12
L 13
U 5
L 17
R 16
D 10
U 12
L 7
R 4
U 8
D 17
R 13
L 2
D 5
L 1
R 2
D 16
U 9
D 15
L 8
U 14
R 9
D 18
U 16
L 17
U 9
D 11
U 17
R 8
D 17
U 14
D 8
U 8
R 8
U 14
R 5
L 1
R 3
D 5
U 10
R 16
U 18
D 16
U 11
D 18
U 13
L 11
D 2
R 16
D 15
L 9
D 12
R 11
L 8
U 8
R 10
L 2
D 6
L 5
D 9
L 3
D 1
U 18
D 12
U 13
L 6
R 17
D 10
R 9
L 6
R 3
U 1
R 1
U 6
L 15
U 8
D 15
U 14
R 10
L 6
U 1
L 12
R 9
D 13
U 1
L 16
U 16
L 13
R 4
U 3
D 11
L 12
R 11
U 17
R 18
L 4
R 6
L 18
D 10
L 16
R 2
D 4
R 14
D 11
L 12
R 7
L 9
U 12
D 12
R 4
L 1
D 14
R 14
L 3
U 2
L 6
R 7
D 6
U 18
L 17
U 12
R 12
L 5
D 13
R 7
D 8
L 16
D 13
U 4
D 3
R 16
L 9
U 8
D 15
R 8
L 12
R 5
L 1
U 11
D 11
L 10
U 7
D 6
L 15
D 9
R 10
D 6
U 14
L 7
U 19
R 17
L 12
U 1
L 9
R 17
D 12
U 3
L 15
R 16
D 15
R 15
L 1
U 16
R 19
D 9
L 16
D 12
R 8
L 2
D 16
L 17
U 16
D 9
L 9
U 8
L 9
R 16
L 3
D 8
U 7
D 10
U 17
R 2
D 16
R 6
U 9
R 4
L 17
D 10
U 10
L 14
D 9
R 8
L 9
R 18
U 13
L 16
R 2
U 16
L 11
U 4
L 13
R 8
L 19
U 4
D 10
R 10
U 14
R 13
L 17
U 17
R 12
D 18
R 2
D 5
L 12
U 6
D 7
R 9
L 13
D 15
R 9
U 16
D 14
R 8
L 8
U 10
L 8
D 18
U 8
D 9
L 6
R 8
U 4
D 14
L 13
D 4
R 3
U 13
L 2
"#;
